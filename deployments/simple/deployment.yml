---
### VERY BASIC AND UNSECURE DEPLOYMENT
apiVersion: v1
kind: Service                    # Type of kubernetes resource
metadata:
  name: go-info-server-service   # Name of the resource
  labels:     # The labels that will be applied
    app: go-info-server
  annotations:
    externalTrafficPolicy: "local"
spec:
  type: LoadBalancer             # Adds a load balancer (from the cloud provider)
  externalTrafficPolicy: Local
  ports:                         # Take incoming HTTP requests on this port (exposed) and forward them to the targetPort of container
    - name: http
      port: 8000
      targetPort: 8000            # Should match the PORT env variable in deployment and containerPort that the Go application listens on
  selector:
    app: go-info-server         # Map any pod with label `app=go-hello-world` to this service
---
apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: go-info-server           # Name of the Kubernetes resource
spec:
  replicas: 2                    # Number of pods to run at any given time
  selector:
    matchLabels:
      app: go-info-server        # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all the pods in this deployment
        app: go-info-server
    spec:                        # Spec for the container which will run in the Pod
      containers:
      - name: go-info-server
        image: laotseu/go-info-server:0.2.9
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8000  # Should match the PORT env variable above  that the Go application listens on
        env:
          - name: PORT
            value: "8000"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
